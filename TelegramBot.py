import telebot
import psycopg2
from datetime import datetime
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types

BOT_TOKEN = "7856265146:AAFc5CgMuXvxT27RCNVu7pZKznrKeE-JWhY"
bot = telebot.TeleBot(BOT_TOKEN)

DB_CONFIG = {
    "dbname": "calendar_bot",
    "user": "postgres",
    "password": "Andronik_",
    "host": "localhost"
}

def db_connect():
    return psycopg2.connect(**DB_CONFIG)

def make_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
        KeyboardButton("üìä –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"),
        KeyboardButton("üïí –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å"),
        KeyboardButton("üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
        KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
        KeyboardButton("üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è"),
        KeyboardButton("üì® –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    ]
    kb.add(*buttons)
    return kb

@bot.message_handler(commands=['start'])
def start(message):
    conn = db_connect()
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE telegram_id = %s",
                (message.from_user.id,))
    user = cur.fetchone()
    msg = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏.\n\n"

    if not user:
        cur.execute("""
            INSERT INTO users (telegram_id, username, full_name)
            VALUES (%s, %s, %s)
        """, (
            message.from_user.id,
            message.from_user.username,
            f"{message.from_user.first_name} {message.from_user.last_name or ''}"))
        conn.commit()
        msg += "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"

    msg += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    bot.reply_to(message, msg, reply_markup=make_keyboard())
    cur.close()
    conn.close()

@bot.message_handler(func=lambda m: m.text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
def new_event(message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=kb)
    bot.register_next_step_handler(msg, get_name)

def get_name(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=make_keyboard())
        return

    event = {'creator': message.from_user.id}
    event['name'] = message.text
    msg = bot.reply_to(message, "üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    bot.register_next_step_handler(msg, get_desc, event)

def get_desc(message, event):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=make_keyboard())
        return

    event['desc'] = None if message.text == '-' else message.text
    msg = bot.reply_to(message, "üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    bot.register_next_step_handler(msg, get_time, event)

def get_time(message, event):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=make_keyboard())
        return

    try:
        dt = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        if dt < datetime.now():
            msg = bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:")
            bot.register_next_step_handler(msg, get_time, event)
            return
        event['time'] = dt
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("‚ûñ –ë–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
        kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        msg = bot.reply_to(message,
            "üë• –£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (@user1, @user2) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':",
            reply_markup=kb)
        bot.register_next_step_handler(msg, get_users, event)
    except ValueError:
        msg = bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        bot.register_next_step_handler(msg, get_time, event)

def get_users(message, event):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=make_keyboard())
        return

    conn = db_connect()
    cur = conn.cursor()

    # –ø–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
    cur.execute("""
        SELECT id, username 
        FROM users 
        WHERE telegram_id = %s
    """, (event['creator'],))
    creator_id, creator_name = cur.fetchone()

    # —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    cur.execute("""
        INSERT INTO events (name, description, date_time, creator_id)
        VALUES (%s, %s, %s, %s)
        RETURNING id
    """, (event['name'], event['desc'], event['time'], creator_id))
    event_id = cur.fetchone()[0]

    results = {'ok': [], 'busy': [], 'not_found': []}
    if message.text != "‚ûñ –ë–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        users = [u.strip().replace('@', '') for u in message.text.split(',')]
        kb = InlineKeyboardMarkup()
        kb.row(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{event_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{event_id}"))

        for username in users:
            cur.execute("SELECT id, telegram_id FROM users WHERE username = %s", (username,))
            user = cur.fetchone()

            if not user:
                results['not_found'].append(username)
                continue

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
            cur.execute("""
                SELECT status 
                FROM availability 
                WHERE user_id = %s AND date_time = %s
            """, (user[0], event['time']))

            if cur.fetchone():
                results['busy'].append(username)
                continue

            cur.execute("""
                INSERT INTO event_participants (event_id, user_id, status)
                VALUES (%s, %s, 'pending')
            """, (event_id, user[0]))

            results['ok'].append(username)
            invite = f"""
üé´ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!

üìÖ {event['name']}
üïí {event['time'].strftime('%Y-%m-%d %H:%M')}
üë§ –û—Ç: @{creator_name}
"""
            if event['desc']:
                invite += f"üìù {event['desc']}\n"
            bot.send_message(user[1], invite, reply_markup=kb)


    conn.commit()
    resp = f"""
üéâ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üìÖ {event['time'].strftime('%Y-%m-%d')}
üïí {event['time'].strftime('%H:%M')}
"""
    if event['desc']:
        resp += f"üìù {event['desc']}\n"

    if message.text == "‚ûñ –ë–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        resp += "\nüë§ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:
        if results['ok']:
            resp += f"\nüì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã: @{', @'.join(results['ok'])}"
        if results['busy']:
            resp += f"\n‚ö†Ô∏è –ó–∞–Ω—è—Ç—ã: @{', @'.join(results['busy'])}"
        if results['not_found']:
            resp += f"\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: @{', @'.join(results['not_found'])}"

    bot.reply_to(message, resp, reply_markup=make_keyboard())
    cur.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith(('accept_', 'reject_')))
def handle_invitation_response(call):
    action, event_id = call.data.split('_')
    event_id = int(event_id)
    conn = db_connect()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
    cursor.execute("""
        SELECT e.name, u.username
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE e.id = %s
    """, (event_id,))

    event = cursor.fetchone()
    if not event:
        bot.answer_callback_query(call.id, "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        cursor.close()
        conn.close()
        return

    event_name, creator_username = event

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    status = 'confirmed' if action == 'accept' else 'declined'
    cursor.execute("""
        UPDATE event_participants
        SET status = %s
        WHERE event_id = %s 
        AND user_id = (
            SELECT id FROM users 
            WHERE telegram_id = %s
        )
        RETURNING (
            SELECT username FROM users 
            WHERE telegram_id = %s
        )
    """, (status, event_id, call.message.chat.id, call.message.chat.id))

    result = cursor.fetchone()
    if result:
        participant_username = result[0]

        if action == 'accept':
            response_text = "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
        else:
            response_text = "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None)

        new_message_text = call.message.text + f"\n\n{response_text}"
        bot.edit_message_text(
            text=new_message_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å–æ–±—ã—Ç–∏—è
        cursor.execute("""
            SELECT telegram_id 
            FROM users 
            WHERE username = %s
        """, (creator_username,))
        creator_chat = cursor.fetchone()

        if creator_chat:
            if action == 'accept':
                creator_notification = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{participant_username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{event_name}'"
            else:
                creator_notification = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{participant_username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{event_name}'"

            bot.send_message(creator_chat[0], creator_notification)

        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

    conn.commit()
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
def my_events(message):
    conn = db_connect()
    cursor = conn.cursor()
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ —è —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    cursor.execute("""
        SELECT 
            e.name, 
            e.date_time, 
            e.description, 
            u.username,
            e.creator_id = (SELECT id FROM users WHERE telegram_id = %s) as is_creator,
            (
                SELECT COUNT(*) 
                FROM event_participants ep2 
                WHERE ep2.event_id = e.id 
                AND ep2.status = 'confirmed'
            ) as participants
        FROM events e
        JOIN users u ON e.creator_id = u.id
        LEFT JOIN event_participants ep ON e.id = ep.event_id 
            AND ep.user_id = (SELECT id FROM users WHERE telegram_id = %s)
        WHERE 
            e.creator_id = (SELECT id FROM users WHERE telegram_id = %s)
            OR (ep.user_id = (SELECT id FROM users WHERE telegram_id = %s) 
                AND ep.status = 'confirmed')
        ORDER BY e.date_time
    """, (message.from_user.id, message.from_user.id, message.from_user.id, message.from_user.id))
    events = cursor.fetchall()

    if not events:
        response = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
    else:
        response = "üìã –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
        for e in events:
            response += f"üìÖ {e[0]}\n"  # –ù–∞–∑–≤–∞–Ω–∏–µ
            response += f"üïí {e[1].strftime('%Y-%m-%d %H:%M')}\n"  # –î–∞—Ç–∞
            if e[2]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                response += f"üìù {e[2]}\n"
            response += f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @{e[3]}\n"
            response += f"üë• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ: {e[5]} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            if e[4]:  # –ï—Å–ª–∏ —è —Å–æ–∑–¥–∞—Ç–µ–ª—å
                response += "üéØ –í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä\n"
            else:
                response += "‚úÖ –í—ã —É—á–∞—Å—Ç–Ω–∏–∫\n"
            response += "\n"
    bot.reply_to(message, response, reply_markup=make_keyboard())
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
def invite_to_event(message):
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT e.id, e.name, e.date_time
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE u.telegram_id = %s
        AND e.date_time > NOW()
        ORDER BY e.date_time
    """, (message.from_user.id,))
    events = cursor.fetchall()
    cursor.close()
    conn.close()

    if not events:
        bot.reply_to(
            message,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=make_keyboard())
        return

    keyboard = InlineKeyboardMarkup()
    for e in events:
        btn_text = f"{e[1]} ({e[2].strftime('%Y-%m-%d %H:%M')})"
        callback = f"invite_{e[0]}"
        keyboard.add(InlineKeyboardButton(text=btn_text, callback_data=callback))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_invite"))
    bot.reply_to(message,"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_invite")
def handle_invite_cancel(call):
    bot.edit_message_text(
        "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=None)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('invite_'))
def handle_invite_selection(call):
    event_id = int(call.data.split('_')[1])
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (@user1, @user2):",
        reply_markup=kb)
    bot.register_next_step_handler(msg, process_invites, event_id)
def process_invites(message, event_id):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=make_keyboard())
        return

    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT e.name, e.date_time, u.username as creator
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE e.id = %s
    """, (event_id,))
    event = cursor.fetchone()

    if not event:
        bot.reply_to(message, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=make_keyboard())
        cursor.close()
        conn.close()
        return

    usernames = message.text.split(',')
    usernames = [u.strip().replace('@', '') for u in usernames]
    invited = []
    already_invited = []
    not_found = []
    unavailable = []
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{event_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{event_id}"))

    for username in usernames:
        cursor.execute(
            "SELECT id, telegram_id FROM users WHERE username = %s",
            (username,))
        user = cursor.fetchone()

        if not user:
            not_found.append(username)
            continue

        cursor.execute("""
            SELECT id FROM event_participants
            WHERE event_id = %s AND user_id = %s
        """, (event_id, user[0]))

        if cursor.fetchone():
            already_invited.append(username)
            continue

        cursor.execute("""
            SELECT status FROM availability
            WHERE user_id = %s AND date_time = %s
        """, (user[0], event[1]))

        avail = cursor.fetchone()
        if avail and avail[0] == 'busy':
            unavailable.append(username)
            continue

        cursor.execute("""
            INSERT INTO event_participants (event_id, user_id, status)
            VALUES (%s, %s, 'pending')
        """, (event_id, user[0]))

        invited.append(username)

        invite_text = f"""
üé´ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!

üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[0]}
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event[1].strftime('%Y-%m-%d %H:%M')}
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @{event[2]}
"""
        bot.send_message(user[1], invite_text, reply_markup=keyboard)

    conn.commit()
    response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
    if invited:
        response += f"\n‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã: @{', @'.join(invited)}"
    if already_invited:
        response += f"\nüìù –£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã: @{', @'.join(already_invited)}"
    if unavailable:
        response += f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: @{', @'.join(unavailable)}"
    if not_found:
        response += f"\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: @{', @'.join(not_found)}"

    bot.reply_to(message, response, reply_markup=make_keyboard())
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
def delete_event(message):
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT e.id, e.name, e.date_time
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE u.telegram_id = %s
        ORDER BY e.date_time
    """, (message.from_user.id,))
    events = cursor.fetchall()
    cursor.close()
    conn.close()

    if not events:
        bot.reply_to(
            message,
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
            reply_markup=make_keyboard())
        return

    keyboard = InlineKeyboardMarkup()
    for e in events:
        btn_text = f"{e[1]} ({e[2].strftime('%Y-%m-%d %H:%M')})"
        callback = f"delete_{e[0]}"
        keyboard.add(InlineKeyboardButton(text=btn_text, callback_data=callback))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))

    bot.reply_to(
        message,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def handle_delete_cancel(call):
    bot.edit_message_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=None)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_selection(call):
    event_id = int(call.data.split('_')[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{event_id}"))
    bot.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ? –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('confirm_delete_', 'cancel_delete_')))
def handle_delete_confirmation(call):
    action = call.data.split('_')[0]
    event_id = int(call.data.split('_')[2])

    if action == 'cancel':
        bot.edit_message_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            call.message.chat.id,
            call.message.message_id)
        bot.answer_callback_query(call.id)
        return

    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT e.name, e.date_time 
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE e.id = %s AND u.telegram_id = %s
    """, (event_id, call.message.chat.id))

    event = cursor.fetchone()
    if not event:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
        cursor.close()
        conn.close()
        return

    cursor.execute("""
        SELECT u.telegram_id
        FROM event_participants ep
        JOIN users u ON ep.user_id = u.id
        WHERE ep.event_id = %s
    """, (event_id,))

    participants = cursor.fetchall()

    cursor.execute("DELETE FROM event_participants WHERE event_id = %s", (event_id,))
    cursor.execute("DELETE FROM events WHERE id = %s", (event_id,))
    conn.commit()

    bot.edit_message_text(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event[0]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
        call.message.chat.id,
        call.message.message_id)
    bot.answer_callback_query(call.id)

    notif_text = f"""
‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!

üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[0]}
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event[1].strftime('%Y-%m-%d %H:%M')}

–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.
"""

    for p in participants:
        bot.send_message(p[0], notif_text)

    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è")
def leave_event(message):
    conn = db_connect()
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        SELECT e.id, e.name, e.date_time
        FROM events e
        JOIN event_participants ep ON e.id = ep.event_id
        WHERE ep.user_id = (SELECT id FROM users WHERE telegram_id = %s)
        AND e.creator_id != (SELECT id FROM users WHERE telegram_id = %s)
        AND ep.status = 'confirmed'
    """, (message.from_user.id, message.from_user.id))
    events = cursor.fetchall()

    if not events:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.", reply_markup=make_keyboard())
        return
    keyboard = InlineKeyboardMarkup()

    for event in events:
        button_text = f"{event[1]} ({event[2].strftime('%Y-%m-%d %H:%M')})"
        callback_data = f"leave_{event[0]}"
        keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞:", reply_markup=keyboard)
    cursor.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('leave_'))
def handle_leave_selection(call):
    event_id = int(call.data.split('_')[1])
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"confirm_leave_{event_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è", callback_data=f"cancel_leave_{event_id}"))
    bot.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏? –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=confirm_keyboard
    )
@bot.callback_query_handler(func=lambda call: call.data.startswith(('confirm_leave_', 'cancel_leave_')))
def handle_leave_confirmation(call):
    action, _, event_id = call.data.split('_')
    event_id = int(event_id)
    if action == 'cancel':
        bot.edit_message_text(
            "–í—ã –æ—Å—Ç–∞–ª–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–æ–±—ã—Ç–∏—è.",
            call.message.chat.id,
            call.message.message_id)
        bot.answer_callback_query(call.id)
        return
    conn = db_connect()
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""
        SELECT e.name, e.date_time, u.username, u.telegram_id
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE e.id = %s
    """, (event_id,))

    event = cursor.fetchone()
    if not event:
        bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    event_name, event_date, creator_username, creator_telegram_id = event
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("""
        DELETE FROM event_participants
        WHERE event_id = %s AND user_id = (SELECT id FROM users WHERE telegram_id = %s)
    """, (event_id, call.message.chat.id))

    if cursor.rowcount == 0:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.")
        return

    conn.commit()
    bot.edit_message_text(
        f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏ '{event_name}'.",
        call.message.chat.id,
        call.message.message_id)
    bot.answer_callback_query(call.id)
    notification = f"""
‚ùå –û—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}
üìÖ –°–æ–±—ã—Ç–∏–µ: {event_name}
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_date.strftime('%Y-%m-%d %H:%M')}
    """
    bot.send_message(creator_telegram_id, notification)
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
def remove_participant(message):
    conn = db_connect()
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    cursor.execute("""
        SELECT e.id, e.name, e.date_time
        FROM events e
        JOIN users u ON e.creator_id = u.id
        WHERE u.telegram_id = %s
        AND e.date_time > NOW()
        ORDER BY e.date_time
    """, (message.from_user.id,))

    events = cursor.fetchall()
    if not events:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –≥–¥–µ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.", reply_markup=make_keyboard())
        return

    event_keyboard = InlineKeyboardMarkup()
    for event in events:
        button_text = f"{event[1]} ({event[2].strftime('%Y-%m-%d %H:%M')})"
        callback_data = f"select_event_remove_{event[0]}"
        event_keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:", reply_markup=event_keyboard)
    cursor.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_event_remove_'))
def handle_event_selection_for_remove(call):
    event_id = int(call.data.split('_')[-1])
    conn = db_connect()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
    cursor.execute("""
        SELECT 
            u.id,
            u.username,
            u.telegram_id
        FROM users u
        JOIN event_participants ep ON u.id = ep.user_id
        WHERE ep.event_id = %s
        AND ep.status = 'confirmed'
        AND u.id != (SELECT creator_id FROM events WHERE id = %s)
    """, (event_id, event_id))

    participants = cursor.fetchall()
    if not participants:
        bot.edit_message_text(
            "–í —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            call.message.chat.id,
            call.message.message_id)
        return

    participant_keyboard = InlineKeyboardMarkup()
    for participant in participants:
        button_text = f"@{participant[1]}"
        callback_data = f"remove_participant_{event_id}_{participant[0]}"
        participant_keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    participant_keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove_participant"))
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=participant_keyboard)
    cursor.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_participant_'))
def handle_remove_participant(call):
    _, _, event_id, user_id = call.data.split('_')
    event_id = int(event_id)
    user_id = int(user_id)
    conn = db_connect()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è
    cursor.execute("""
        SELECT e.name, e.date_time, u.telegram_id, u.username
        FROM events e
        JOIN users u ON u.id = %s
        WHERE e.id = %s
        AND e.creator_id = (SELECT id FROM users WHERE telegram_id = %s)
    """, (user_id, event_id, call.message.chat.id))

    event_info = cursor.fetchone()
    if not event_info:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
        return

    event_name, event_date, participant_telegram_id, participant_username = event_info

    # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    cursor.execute("""
        DELETE FROM event_participants
        WHERE event_id = %s AND user_id = %s
    """, (event_id, user_id))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
    bot.edit_message_text(
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @{participant_username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–æ–±—ã—Ç–∏—è '{event_name}'",
        call.message.chat.id,
        call.message.message_id)
    bot.answer_callback_query(call.id)
    notification_text = f"""
‚ùå –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è

üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_name}
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_date.strftime('%Y-%m-%d %H:%M')}

–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
"""
    bot.send_message(participant_telegram_id, notification_text)
    cursor.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == "cancel_remove_participant")
def handle_cancel_remove(call):
    bot.edit_message_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        call.message.chat.id,
        call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == "üïí –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å")
def set_availability(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_button = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(cancel_button)

    msg = bot.reply_to(message, """ 
üïí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú —Å—Ç–∞—Ç—É—Å

–°—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚úÖ free - —Å–≤–æ–±–æ–¥–µ–Ω
‚ùå busy - –∑–∞–Ω—è—Ç

–ü—Ä–∏–º–µ—Ä: 2025-01-10 15:00 busy
""", reply_markup=markup)
    bot.register_next_step_handler(msg, save_availability)

def save_availability(message):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=make_keyboard())
        return
    args = message.text.split()
    if len(args) != 3:
        bot.reply_to(message, """
‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. 

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú —Å—Ç–∞—Ç—É—Å

–ü—Ä–∏–º–µ—Ä: 2025-01-10 15:00 busy
""", reply_markup=make_keyboard())
        return

    date_time_str = f"{args[0]} {args[1]}"
    status = args[2].lower()
    if status not in ['busy', 'free']:
        bot.reply_to(message, "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'busy' –∏–ª–∏ 'free'", reply_markup=make_keyboard())
        return

    try:
        date_time = datetime.strptime(date_time_str, '%Y-%m-%d %H:%M')
    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=make_keyboard())
        return

    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, full_name 
        FROM users 
        WHERE telegram_id = %s
    """, (message.from_user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=make_keyboard())
        return

    user_id, user_fullname = user_data
    cursor.execute("""
        INSERT INTO availability (user_id, date_time, status)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id, date_time)
        DO UPDATE SET status = EXCLUDED.status
    """, (user_id, date_time, status))

    if status == 'busy':
        cursor.execute("""
            SELECT e.id, e.name, e.creator_id, e.date_time
            FROM events e
            JOIN event_participants ep ON e.id = ep.event_id
            WHERE ep.user_id = %s 
            AND DATE(e.date_time) = DATE(%s)
            AND ep.status = 'confirmed'
        """, (user_id, date_time))

        events = cursor.fetchall()
        for event in events:
            event_id, event_name, creator_id, event_date = event
            cursor.execute("""
                UPDATE event_participants
                SET status = 'cancelled'
                WHERE event_id = %s AND user_id = %s
            """, (event_id, user_id))
            notify_event_creator(bot, creator_id, user_fullname, event_name, event_date.strftime('%Y-%m-%d %H:%M'))

    conn.commit()
    status_emoji = "‚úÖ" if status == "free" else "‚ùå"
    response = f"{status_emoji} –°—Ç–∞—Ç—É—Å –Ω–∞ {date_time_str} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ '{status}'"

    if status == 'busy' and events:
        response += f"\n\n–û—Ç–º–µ–Ω–µ–Ω–æ —É—á–∞—Å—Ç–∏–µ –≤ {len(events)} —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."

    bot.reply_to(message, response, reply_markup=make_keyboard())
    cursor.close()
    conn.close()

def notify_event_creator(bot, creator_id, user_fullname, event_name, date):
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE id = %s", (creator_id,))
    creator_data = cursor.fetchone()
    if creator_data:
        message = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_fullname} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏ '{event_name}' ({date}), —Ç–∞–∫ –∫–∞–∫ –æ—Ç–º–µ—Ç–∏–ª —ç—Ç—É –¥–∞—Ç—É –∫–∞–∫ '–∑–∞–Ω—è—Ç'"
        bot.send_message(creator_data[0], message)
    cursor.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üì® –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
def my_invitations(message):
    conn = db_connect()
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    cursor.execute("""
        SELECT 
            e.id,
            e.name, 
            e.date_time, 
            e.description,
            u.username as creator_username,
            ep.status,
            (
                SELECT COUNT(*) 
                FROM event_participants ep2 
                WHERE ep2.event_id = e.id 
                AND ep2.status = 'confirmed'
            ) as confirmed_participants
        FROM events e
        JOIN users u ON e.creator_id = u.id
        JOIN event_participants ep ON e.id = ep.event_id
        JOIN users u2 ON ep.user_id = u2.id
        WHERE u2.telegram_id = %s
        AND ep.status = 'pending'
        AND e.date_time > NOW()
        ORDER BY e.date_time
    """, (message.from_user.id,))

    invitations = cursor.fetchall()
    if not invitations:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è.", reply_markup=make_keyboard())
        return

    for invitation in invitations:
        event_id, name, date_time, description, creator_username, status, confirmed_participants = invitation
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{event_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{event_id}"))

        invitation_text = f"""
üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!

üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_time.strftime('%Y-%m-%d %H:%M')}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ: {confirmed_participants}
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @{creator_username}
"""
        if description:
            invitation_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"

        bot.send_message(message.chat.id, invitation_text, reply_markup=keyboard)
    cursor.close()
    conn.close()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()